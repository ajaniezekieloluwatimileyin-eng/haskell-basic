-- HC8T1: Type Synonyms and Basic Function
type Address = String
type Value = Int

generateTx :: Address -> Address -> Value -> String
generateTx from to value =
    "From: " ++ from ++ " | To: " ++ to ++ " | Value: " ++ show value


-- HC8T2: New Types and Data Constructors
data PaymentMethod = Cash | Card | Cryptocurrency deriving Show

data Person = Person {
    pname :: String,
    paddress :: (String, Int),
    paymentMethod :: PaymentMethod
} deriving Show

bob :: Person
bob = Person { pname = "Bob", paddress = ("Main Street", 101), paymentMethod = Cash }


-- HC8T3: Algebraic Data Types and Functions
data Shape = Circle Float | Rectangle Float Float deriving Show

area :: Shape -> Float
area (Circle r) = pi * r * r
area (Rectangle w h) = w * h


-- HC8T4: Record Syntax for Employee
data Employee = Employee {
    name :: String,
    experienceInYears :: Float
} deriving Show

richard :: Employee
richard = Employee { name = "Richard", experienceInYears = 7.5 }


-- HC8T5: Record Syntax for Person (different type from above Person)
data PersonRec = PersonRec {
    personName :: String,
    age :: Int,
    isEmployed :: Bool
} deriving Show

person1 :: PersonRec
person1 = PersonRec { personName = "Alice", age = 30, isEmployed = True }

person2 :: PersonRec
person2 = PersonRec { personName = "Charlie", age = 25, isEmployed = False }


-- HC8T6: Record Syntax for Shape Variants
data ShapeRec
    = CircleRec { center :: (Float, Float), color :: String, radius :: Float }
    | RectangleRec { width :: Float, height :: Float, color :: String }
    deriving Show

circleShape :: ShapeRec
circleShape = CircleRec { center = (0,0), color = "Red", radius = 5 }

rectangleShape :: ShapeRec
rectangleShape = RectangleRec { width = 10, height = 5, color = "Blue" }


-- HC8T7: Data Types and Describing Animals
data Animal = Dog String | Cat String deriving Show

describeAnimal :: Animal -> String
describeAnimal (Dog name) = "This is a dog named " ++ name
describeAnimal (Cat name) = "This is a cat named " ++ name

dog :: Animal
dog = Dog "Buddy"

cat :: Animal
cat = Cat "Whiskers"


-- HC8T8: Type Synonyms and Greeting Function
type Name = String
type Age = Int

greet :: Name -> Age -> String
greet n a = "Hello, " ++ n ++ "! You are " ++ show a ++ " years old."


-- HC8T9: Record Type and Transaction Function
data Transaction = Transaction {
    from :: Address,
    to :: Address,
    amount :: Value,
    transactionId :: String
} deriving Show

createTransaction :: Address -> Address -> Value -> String
createTransaction fromAddr toAddr val =
    let tx = Transaction { from = fromAddr, to = toAddr, amount = val, transactionId = "TX123" }
    in transactionId tx


-- HC8T10: Deriving Show for Book
data Book = Book {
    title :: String,
    author :: String,
    year :: Int
} deriving Show

book1 :: Book
book1 = Book { title = "Learn You a Haskell", author = "Miran Lipovaca", year = 2011 }


-- MAIN FUNCTION
main :: IO ()
main = do
    putStrLn "HC8T1: Generate Transaction"
    print (generateTx "Alice" "Bob" 100)

    putStrLn "\nHC8T2: Person Bob with Cash"
    print bob

    putStrLn "\nHC8T3: Areas"
    print (area (Circle 5))       -- Circle area
    print (area (Rectangle 10 5)) -- Rectangle area

    putStrLn "\nHC8T4: Employee Richard"
    print richard

    putStrLn "\nHC8T5: Persons"
    print person1
    print person2

    putStrLn "\nHC8T6: Shapes with Record Syntax"
    print circleShape
    print rectangleShape

    putStrLn "\nHC8T7: Animals"
    print (describeAnimal dog)
    print (describeAnimal cat)

    putStrLn "\nHC8T8: Greeting"
    print (greet "Diana" 22)

    putStrLn "\nHC8T9: Transaction"
    print (createTransaction "Alice" "Bob" 500)

    putStrLn "\nHC8T10: Book"
    print book1
