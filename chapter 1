import Data.List (sortBy)

-- HC1T1 - Task 1: Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double

-- HC1T2 - Task 2: Pure Function Example
circleArea :: Floating a => a -> a
circleArea r = pi * r * r

-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18

-- HC1T4 - Task 4: Composing a Function to Process Player Data
extractPlayers :: [(String, Int)] -> [String]
extractPlayers players = [name | (name, _) <- players]

sortByScore :: [(String, Int)] -> [(String, Int)]
sortByScore = reverse . sortBy (\(_, s1) (_, s2) -> compare s1 s2)

topThree :: [(String, Int)] -> [(String, Int)]
topThree = take 3

getTopThreePlayers :: [(String, Int)] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Int]
infiniteNumbers = [1..]

firstN :: Int -> [Int]
firstN n = take n infiniteNumbers

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y

-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Floating a => a -> a
fToC f = (f - 32) * 5 / 9

-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Main function to demonstrate outputs
main :: IO ()
main = do
    putStrLn "HC1T1 - Function Composition:"
    print (doubleThenIncrement 5)   -- (5*2) + 1 = 11

    putStrLn "\nHC1T2 - Pure Function Example (circle area, radius 3):"
    print (circleArea 3)            -- pi * 3^2 = 28.27...

    putStrLn "\nHC1T3 - Greater than 18 check:"
    print (greaterThan18 20)        -- True
    print (greaterThan18 15)        -- False

    putStrLn "\nHC1T4 - Top Three Players:"
    let players = [("Alice", 50), ("Bob", 80), ("Charlie", 70), ("Dave", 90)]
    print (getTopThreePlayers players) -- ["Dave","Bob","Charlie"]

    putStrLn "\nHC1T5 - Laziness (first 10 numbers):"
    print (firstN 10)               -- [1,2,3,4,5,6,7,8,9,10]

    putStrLn "\nHC1T6 - Add Numbers:"
    print (addNumbers 7 8)          -- 15

    putStrLn "\nHC1T7 - Fahrenheit to Celsius (100F):"
    print (fToC 100)                -- 37.777...

    putStrLn "\nHC1T8 - Apply Twice:"
    print (applyTwice increment 5)  -- 7
    print (applyTwice double 3)     -- 12
